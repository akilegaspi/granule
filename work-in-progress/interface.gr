import Nat



----------------
-- interfaces --
----------------


-- syntax of interface is:
--
-- interface [constraints] Name params where
--   Signature1;
--   Signature2;
--   -- etc.


-- interface with no constraints
interface Magma a where
  op : a -> a -> a


-- interface with one constraint
interface (Magma ty) => Semigroup ty where
  pfSemiAssoc : forall (a : ty, b : ty, c : ty) . op (op a b) c = op a (op b c)



---------------
-- instances --
---------------


-- syntax of instances is:
--
-- instance [constraints] Name types [named var] [using vars] where
--   Definition1;
--   Definition2;
--   -- etc.


-- simple instance of a Magma with Natural numbers
instance Magma N where
  op x y = add x y


instance Semigroup N where
  -- todo: proof that 'add' for 'Nat' is associative
  -- pfSemiAssoc = ?



---------------------------
-- constrained functions --
---------------------------


-- syntax of constrained functions is:
--
-- func : forall (v1 : ty1, v2 : ty2, ...) . (Constr1 ty1, Constr2 ty2, ...) => type


-- function with one constraint
combine3 : forall (a : Type) . (Semigroup a) => a -> a -> a -> a
combine3 x y z = op (op x y) z



-------------------
-- todo examples --
-------------------


-- - [ ] named instance
--   - e.g., 'instance Magma N named plusNatMagma where...'
-- - [ ] using instance
--   - e.g., 'instance Semigroup N using plusNatMagma where...'
-- - [ ] named+using instance
--   - e.g., 'instance Semigroup N named plusNatSemi using plusNatMagma where...'
-- - [ ] instance with single constraint
-- - [ ] instance with multiple constraints
-- - [ ] interface with multiple constraints
-- - [ ] function with multiple constraints
-- - [ ] specifying use of particular named instance
--   - ideas: 'op x y @{plusNatSemi}' (like Idris)?
-- - [ ] should parentheses be optional for single-constraint functions
--   - i.e., 'f : forall (x : ty) . Constr ty => ...' rather than
--     'f : forall (x : ty) . (Constr ty) => ...'
